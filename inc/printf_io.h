
/*
    C Type Printf Implementation

    Created on: July 26, 2023

    Author: Coskun ERGAN
*/

#pragma once
#include <stdio.h>
#include <zephyr/devicetree.h>
#include <zephyr/drivers/gpio.h>
#include <zephyr/kernel.h>

#include <zpp.hpp>
#include <zpp/timer.hpp>
#include <chrono>
#include <zpp/thread.hpp>
#include <zpp/fmt.hpp>

namespace device_printf
{
    using namespace zpp;
    using namespace std::chrono;

    extern "C" void __stdout_hook_install(int (*fn)(int));
    extern "C" int printf_io_write(int c);

    static const struct gpio_dt_spec lcd_bl =
        GPIO_DT_SPEC_GET_OR(DT_NODELABEL(lcd_bl), gpios,
                            {
                                0
                            });
    static const struct gpio_dt_spec lcd_rst =
        GPIO_DT_SPEC_GET_OR(DT_NODELABEL(lcd_rst), gpios,
                            {
                                0
                            });
    static const struct gpio_dt_spec lcd_enb =
        GPIO_DT_SPEC_GET_OR(DT_NODELABEL(lcd_enb), gpios,
                            {
                                0
                            });
    static const struct gpio_dt_spec lcd_cmd =
        GPIO_DT_SPEC_GET_OR(DT_NODELABEL(lcd_cmd), gpios,
                            {
                                0
                            });
    static const struct gpio_dt_spec lcd_dta =
        GPIO_DT_SPEC_GET_OR(DT_NODELABEL(lcd_dta), gpios,
                            {
                                0
                            });
    static const struct gpio_dt_spec lcd_clk =
        GPIO_DT_SPEC_GET_OR(DT_NODELABEL(lcd_clk), gpios,
                            {
                                0
                            });

    const uint8_t init_params[] =
    {
        0xF1, 0x0F, 0xF8, 0x01, 0x06, 0xF0, 0x00, 0x2D, 0xA8, 0xA3, 0x81, 0x8, 0xFF
    };

    const uint8_t char_table[111][6] =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // SPACE
        0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, // !
        0x00, 0x03, 0x00, 0x03, 0x00, 0x00, // "
        0x14, 0x3E, 0x14, 0x3E, 0x14, 0x00, // #
        0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00, // $
        0x43, 0x33, 0x08, 0x66, 0x61, 0x00, // %
        0x36, 0x49, 0x55, 0x22, 0x50, 0x00, // &
        0x00, 0x05, 0x03, 0x00, 0x00, 0x00, // '
        0x00, 0x1C, 0x22, 0x41, 0x00, 0x00, // (
        0x00, 0x41, 0x22, 0x1C, 0x00, 0x00, // )
        0x14, 0x08, 0x3E, 0x08, 0x14, 0x00, // *
        0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, // +
        0x00, 0x50, 0x30, 0x00, 0x00, 0x00, // ,
        0x08, 0x08, 0x08, 0x08, 0x08, 0x00, // -
        0x00, 0x60, 0x60, 0x00, 0x00, 0x00, // .
        0x20, 0x10, 0x08, 0x04, 0x02, 0x00, // /
        0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00, // 0
        0x04, 0x02, 0x7F, 0x00, 0x00, 0x00, // 1
        0x42, 0x61, 0x51, 0x49, 0x46, 0x00, // 2
        0x22, 0x41, 0x49, 0x49, 0x36, 0x00, // 3
        0x18, 0x14, 0x12, 0x7F, 0x10, 0x00, // 4
        0x27, 0x45, 0x45, 0x45, 0x39, 0x00, // 5
        0x3E, 0x49, 0x49, 0x49, 0x32, 0x00, // 6
        0x01, 0x01, 0x71, 0x09, 0x07, 0x00, // 7
        0x36, 0x49, 0x49, 0x49, 0x36, 0x00, // 8
        0x26, 0x49, 0x49, 0x49, 0x3E, 0x00, // 9
        0x00, 0x36, 0x36, 0x00, 0x00, 0x00, // :
        0x00, 0x56, 0x36, 0x00, 0x00, 0x00, // ;
        0x08, 0x14, 0x22, 0x41, 0x00, 0x00, // <
        0x14, 0x14, 0x14, 0x14, 0x14, 0x00, // =
        0x00, 0x41, 0x22, 0x14, 0x08, 0x00, // >
        0x02, 0x01, 0x51, 0x09, 0x06, 0x00, // ?
        0x00, 0x06, 0x09, 0x09, 0x06, 0x00, // @
        0x7E, 0x09, 0x09, 0x09, 0x7E, 0x00, // A
        0x7F, 0x49, 0x49, 0x49, 0x36, 0x00, // B
        0x3E, 0x41, 0x41, 0x41, 0x22, 0x00, // C
        0x7F, 0x41, 0x41, 0x41, 0x3E, 0x00, // D
        0x7F, 0x49, 0x49, 0x49, 0x41, 0x00, // E
        0x7F, 0x09, 0x09, 0x09, 0x01, 0x00, // F
        0x3E, 0x41, 0x41, 0x49, 0x3A, 0x00, // G
        0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00, // H
        0x00, 0x41, 0x7F, 0x41, 0x00, 0x00, // I
        0x30, 0x40, 0x40, 0x40, 0x3F, 0x00, // J
        0x7F, 0x08, 0x14, 0x22, 0x41, 0x00, // K
        0x7F, 0x40, 0x40, 0x40, 0x40, 0x00, // L
        0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00, // M
        0x7F, 0x02, 0x04, 0x08, 0x7F, 0x00, // N
        0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00, // O
        0x7F, 0x09, 0x09, 0x09, 0x06, 0x00, // P
        0x1E, 0x21, 0x21, 0x21, 0x5E, 0x00, // Q
        0x7F, 0x09, 0x09, 0x09, 0x76, 0x00, // R
        0x26, 0x49, 0x49, 0x49, 0x32, 0x00, // S
        0x01, 0x01, 0x7F, 0x01, 0x01, 0x00, // T
        0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00, // U
        0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00, // V
        0x7F, 0x20, 0x10, 0x20, 0x7F, 0x00, // W
        0x63, 0x14, 0x08, 0x14, 0x63, 0x00, // X
        0x07, 0x08, 0x70, 0x08, 0x07, 0x00, // Y
        0x61, 0x51, 0x49, 0x45, 0x43, 0x00, // Z
        0x00, 0x7F, 0x41, 0x00, 0x00, 0x00, // [
        0x02, 0x04, 0x08, 0x10, 0x20, 0x00, //
        0x00, 0x00, 0x41, 0x7F, 0x00, 0x00, // ]
        0x00, 0x06, 0x09, 0x09, 0x06, 0x00, // ^ -> degree
        0x40, 0x40, 0x40, 0x40, 0x40, 0x00, // _
        0x00, 0x01, 0x02, 0x04, 0x00, 0x00, // `
        0x20, 0x54, 0x54, 0x54, 0x78, 0x00, // a
        0x7F, 0x44, 0x44, 0x44, 0x38, 0x00, // b
        0x38, 0x44, 0x44, 0x44, 0x44, 0x00, // c
        0x38, 0x44, 0x44, 0x44, 0x7F, 0x00, // d
        0x38, 0x54, 0x54, 0x54, 0x18, 0x00, // e
        0x04, 0x04, 0x7E, 0x05, 0x05, 0x00, // f
        0x08, 0x54, 0x54, 0x54, 0x3C, 0x00, // g
        0x7F, 0x08, 0x04, 0x04, 0x78, 0x00, // h
        0x00, 0x44, 0x7D, 0x40, 0x00, 0x00, // i
        0x20, 0x40, 0x44, 0x3D, 0x00, 0x00, // j
        0x7F, 0x10, 0x28, 0x44, 0x00, 0x00, // k
        0x00, 0x41, 0x7F, 0x40, 0x00, 0x00, // l
        0x7C, 0x04, 0x78, 0x04, 0x78, 0x00, // m
        0x7C, 0x08, 0x04, 0x04, 0x78, 0x00, // n
        0x38, 0x44, 0x44, 0x44, 0x38, 0x00, // o
        0x7C, 0x14, 0x14, 0x14, 0x08, 0x00, // p
        0x08, 0x14, 0x14, 0x14, 0x7C, 0x00, // q
        0x00, 0x7C, 0x08, 0x04, 0x04, 0x00, // r
        0x48, 0x54, 0x54, 0x54, 0x20, 0x00, // s
        0x04, 0x04, 0x3F, 0x44, 0x44, 0x00, // t
        0x3C, 0x40, 0x40, 0x20, 0x7C, 0x00, // u
        0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00, // v
        0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00, // w
        0x44, 0x28, 0x10, 0x28, 0x44, 0x00, // x
        0x0C, 0x50, 0x50, 0x50, 0x3C, 0x00, // y
        0x44, 0x64, 0x54, 0x4C, 0x44, 0x00, // z
        0x00, 0x08, 0x36, 0x41, 0x41, 0x00, // {
        0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, // |
        0x41, 0x41, 0x36, 0x08, 0x00, 0x00, // }
        0x02, 0x01, 0x02, 0x04, 0x02, 0x00, // ~
        0x30, 0x48, 0xC8, 0x48, 0x00, 0x00, //ç
        0x10, 0xAA, 0xAA, 0xA8, 0x70, 0x00, //ğ
        0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, //ı
        0x38, 0x45, 0x44, 0x45, 0x38, 0x00, //ö
        0x58, 0x54, 0xD4, 0x54, 0x30, 0x00, //ş
        0x38, 0x41, 0x40, 0x41, 0x38, 0x00, //ü
        0x3E, 0x41, 0xC1, 0x41, 0x22, 0x00, //Ç
        0x3C, 0x43, 0x53, 0x53, 0x34, 0x00, //Ğ
        0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, //İ
        0x3C, 0x43, 0x42, 0x43, 0x3C, 0x00, //Ö
        0x26, 0x49, 0xC9, 0x49, 0x32, 0x00, //Ş
        0x3C, 0x41, 0x40, 0x41, 0x3C, 0x00, //Ü
        0x00, 0x00, 0x11, 0x15, 0x0A, 0x00, //3
        0x10, 0x38, 0x7C, 0xFE, 0x38, 0x38, //<
        0x38, 0x38, 0xFE, 0x7C, 0x38, 0x10  //>
    };

    void timer_callback(timer_base *t) noexcept
    {
        gpio_pin_set_dt(&lcd_bl, false);
    }

    auto g_t = make_timer(timer_callback);

    class printf_io
    {
    public:
        printf_io()
        {
            __stdout_hook_install(printf_io_write);
            setvbuf(stdout, NULL, _IONBF, 0);
            gpio_pin_configure_dt(&lcd_rst, GPIO_OUTPUT_INACTIVE);
            gpio_pin_configure_dt(&lcd_bl, GPIO_OUTPUT_INACTIVE);
            gpio_pin_configure_dt(&lcd_enb, GPIO_OUTPUT_INACTIVE);
            gpio_pin_configure_dt(&lcd_cmd, GPIO_OUTPUT_INACTIVE);
            gpio_pin_configure_dt(&lcd_dta, GPIO_OUTPUT_INACTIVE);
            gpio_pin_configure_dt(&lcd_clk, GPIO_OUTPUT_INACTIVE);
            volatile uint8_t i = 0;
            gpio_pin_set_dt(&lcd_rst, true);
            while(--i);
            gpio_pin_set_dt(&lcd_enb, true);
            gpio_pin_set_dt(&lcd_rst, false);
            while(--i);
            gpio_pin_set_dt(&lcd_cmd, false);
            i = 0;
            do
            {
                io_send(init_params[i++]);
            }
            while(i <= sizeof(init_params));
            io_send(0xAF);
            io_send(0xB0);
            for(uint8_t i = 0; i < 16; i++)
            {
                gpio_pin_set_dt(&lcd_cmd, false);
                io_send(i);
                io_send(0x10);
                gpio_pin_set_dt(&lcd_cmd, true);
                io_send(0x00);
            }
            gpio_pin_set_dt(&lcd_cmd, false);
            io_send(0xB8);
            for(i = 0; i < 96; i++)
            {
                gpio_pin_set_dt(&lcd_cmd, false);
                io_send(i & 0xF);
                io_send((i >> 4) | 0x10);
                gpio_pin_set_dt(&lcd_cmd, true);
                io_send(0x00);
            }
            gpio_pin_set_dt(&lcd_cmd, false);
            io_send(0xB0);
            io_send(0x00);
            io_send(0x11);
            gpio_pin_set_dt(&lcd_cmd, true);
            ch_count = 0;
        }
        ~printf_io() = default;
        printf_io(printf_io &&) = delete;
        printf_io &operator=(printf_io &&) = delete;
        printf_io(const printf_io &) = delete;
        printf_io &operator=(const printf_io &) = delete;

        int io_putchar(int ch)
        {
            if((ch == '\r') || (ch_count > 25))
            {
                if(ch == '\r')
                {
                    ch_count = 0;
                }
                gpio_pin_set_dt(&lcd_cmd, false);
                io_send(0xB0);
                io_send(0x00);
                io_send(0x11);
                gpio_pin_set_dt(&lcd_cmd, true);

            }
            else if(ch == '\n')
            {
                if(ch_count < 14)
                {
                    ch_count = 14;
                    gpio_pin_set_dt(&lcd_cmd, false);
                    io_send(0xB1);
                    io_send(0x00);
                    io_send(0x11);
                    gpio_pin_set_dt(&lcd_cmd, true);
                }
            }
            else
            {
                if(++ch_count == 14)
                {
                    io_send(0);
                    io_send(0);
                    gpio_pin_set_dt(&lcd_cmd, false);
                    io_send(0xB1);
                    io_send(0x00);
                    io_send(0x11);
                    gpio_pin_set_dt(&lcd_cmd, true);
                }
                uint8_t temp = ch - 0x20;
                for(uint8_t i = 0; i < 6; i++)
                {
                    io_send(char_table[temp][i]);
                }
            }
            return ch;
        }

        void turn_off_bl_enable(milliseconds ms = 3000ms)
        {
            gpio_pin_set_dt(&lcd_bl, true);
            g_t.start(ms);
        }

    private:
        uint8_t ch_count;
        
        void io_send(uint8_t byte)
        {
            for(uint8_t i = 0; i < 8; i++)
            {
                gpio_pin_set_dt(&lcd_clk, false);
                if((byte & 0x80) == 0x80)
                {
                    gpio_pin_set_dt(&lcd_dta, true);
                }
                else
                {
                    gpio_pin_set_dt(&lcd_dta, false);
                }
                byte <<= 1;
                gpio_pin_set_dt(&lcd_clk, true);
            }
        }
    };

    printf_io printf_io;
    mutex m;

    extern "C" int printf_io_write(int c)
    {
        lock_guard g(m);
        printf_io.io_putchar(c);
        return c;
    }
}
